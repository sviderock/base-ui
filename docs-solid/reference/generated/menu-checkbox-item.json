{
  "name": "MenuCheckboxItem",
  "description": "A menu item that toggles a setting on or off.\nRenders a `<div>` element.",
  "props": {
    "label": {
      "type": "MaybeAccessor",
      "description": "Overrides the text label to use when the item is matched during keyboard text navigation."
    },
    "defaultChecked": {
      "type": "MaybeAccessor",
      "default": "false",
      "description": "Whether the checkbox item is initially ticked.\n\nTo render a controlled checkbox item, use the `checked` prop instead."
    },
    "checked": {
      "type": "MaybeAccessor",
      "description": "Whether the checkbox item is currently ticked.\n\nTo render an uncontrolled checkbox item, use the `defaultChecked` prop instead."
    },
    "onCheckedChange": {
      "type": "((checked: boolean, event: Event) => void)",
      "description": "Event handler called when the checkbox item is ticked or unticked."
    },
    "closeOnClick": {
      "type": "MaybeAccessor",
      "default": "false",
      "description": "Whether to close the menu when the item is clicked."
    },
    "class": {
      "type": "string | ((state: Menu.CheckboxItem.State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "nativeButton": {
      "type": "MaybeAccessor",
      "default": "false",
      "description": "Whether the component renders a native `<button>` element when replacing it\nvia the `render` prop.\nSet to `false` if the rendered element is not a button (e.g. `<div>`)."
    },
    "disabled": {
      "type": "MaybeAccessor",
      "default": "false",
      "description": "Whether the component should ignore user interaction."
    },
    "id": {
      "type": "MaybeAccessor"
    },
    "children": {
      "type": "Element"
    },
    "render": {
      "type": "((props: Accessor<HTMLProps<any>>, state: Accessor<State>) => Element)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    }
  },
  "dataAttributes": {
    "data-checked": {
      "description": "Present when the menu checkbox item is checked."
    },
    "data-unchecked": {
      "description": "Present when the menu checkbox item is not checked."
    },
    "data-highlighted": {
      "description": "Present when the menu checkbox item is highlighted."
    },
    "data-disabled": {
      "description": "Present when the menu checkbox item is disabled."
    }
  },
  "cssVariables": {}
}
